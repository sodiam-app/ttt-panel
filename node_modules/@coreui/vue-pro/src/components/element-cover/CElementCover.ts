import { defineComponent, h, onMounted, nextTick, ref, Ref } from 'vue'
import { CSpinner } from '../spinner'

const CElementCover = defineComponent({
  name: 'CElementCover',
  props: {
    /**
     * Array of custom boundaries. Use to create custom cover area (instead of parent element area). Area is defined by four sides: 'top', 'bottom', 'right', 'left'. If side is not defined by any custom boundary it is equal to parent element boundary. Each custom boundary is object with keys:
     * - sides (array) - select boundaries of element to define boundaries. Sides names: 'top', 'bottom', 'right', 'left'.
     * - query (string) - query used to get element which define boundaries. Search will be done only inside parent element, by parent.querySelector(query) function. [docs]
     *
     * @type {sides: string[], query: string}[]
     */
    boundaries: {
      // TODO: check if this is correct, TJ
      type: Array,
      require: true,
    },
    /**
     * Opacity of the cover. [docs]
     *
     * @type number
     */
    opacity: {
      type: Number,
      require: false,
    },
  },
  setup(props) {
    let containerCoords = {}
    const elementRef = ref() as Ref<HTMLElement>

    const getCustomBoundaries = () => {
      if (!props.boundaries || elementRef === null) {
        return {}
      }
      const parent = elementRef.value.parentElement
      if (!parent) {
        return {}
      }
      const parentCoords = parent.getBoundingClientRect()
      const customBoundaries = {}
      props.boundaries.forEach((value: any) => {
        const element = parent.querySelector(value.query)
        if (!element || !value.sides) {
          return
        }
        const coords = element.getBoundingClientRect()
        value.sides.forEach((side: string) => {
          const sideMargin = Math.abs(coords[side] - parentCoords[side])
          customBoundaries[side] = `${sideMargin}px`
        })
      })
      return customBoundaries
    }

    onMounted(function () {
      nextTick(function () {
        containerCoords = getCustomBoundaries()
      })
    })

    return () =>
      h(
        'div',
        {
          style: {
            ...containerCoords,
            position: 'absolute',
            'background-color': `rgb(255,255,255,${props.opacity})`,
          },
          ref: elementRef,
        },
        h(
          'div', // TODO: use slot to override this
          {
            style: {
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translateX(-50%) translateY(-50%)',
            },
          },
          h(CSpinner, {
            variant: 'grow',
            color: 'primary',
          }),
        ),
      )
  },
})

export { CElementCover }
