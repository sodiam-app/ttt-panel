import { defineComponent, h, PropType, ref, watch } from 'vue'

import { CButton } from '../button/'
import { CDropdown, CDropdownMenu, CDropdownToggle } from '../dropdown/'

import { Color } from '../props'

const CPicker = defineComponent({
  name: 'CPicker',
  props: {
    ...CDropdown.props,
    /**
     * Toggle visibility or set the content of cancel button.
     */
    cancelButton: {
      type: [Boolean, String],
      default: 'Cancel',
    },
    /**
     * Sets the color context of the cancel button to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    cancelButtonColor: {
      ...Color,
      default: 'primary',
    },
    /**
     * Size the cancel button small or large.
     *
     * @values 'sm', 'lg'
     */
    cancelButtonSize: {
      type: String,
      default: 'sm',
      validator: (value: string) => {
        return ['sm', 'lg'].includes(value)
      },
    },
    /**
     * Set the cancel button variant to an outlined button or a ghost button.
     *
     * @values 'ghost', 'outline'
     */
    cancelButtonVariant: {
      type: String,
      default: 'ghost',
      validator: (value: string) => {
        return ['ghost', 'outline'].includes(value)
      },
    },
    /**
     * Toggle visibility or set the content of confirm button.
     */
    confirmButton: {
      type: [Boolean, String],
      default: 'OK',
    },
    /**
     * Sets the color context of the confirm button to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    confirmButtonColor: {
      ...Color,
      default: 'primary',
    },
    /**
     * Size the confirm button small or large.
     *
     * @values 'sm', 'lg'
     */
    confirmButtonSize: {
      type: String,
      default: 'sm',
      validator: (value: string) => {
        return ['sm', 'lg'].includes(value)
      },
    },
    /**
     * Set the confirm button variant to an outlined button or a ghost button.
     *
     * @values 'ghost', 'outline'
     */
    confirmButtonVariant: {
      type: String,
      validator: (value: string) => {
        return ['ghost', 'outline'].includes(value)
      },
    },
    /**
     * Set container type for the component.
     */
    container: {
      type: String as PropType<'dropdown' | 'inline'>,
      default: 'dropdown',
    },
    /**
     * Toggle the disabled state for the component.
     */
    disabled: Boolean,
    /**
     * Toggle visibility of footer element or set the content of footer.
     */
    footer: Boolean,
    /**
     * Toggle the visibility of the component.
     */
    visible: Boolean,
  },
  emits: [
    /**
     * Callback fired when the cancel button has been clicked.
     */
    'cancel',
    /**
     * Callback fired when the confirm button has been clicked.
     */
    'confirm',
    /**
     * Callback fired when the component requests to be hidden.
     */
    'hide',
    /**
     * Callback fired when the component requests to be shown.
     */
    'show',
  ],
  setup(props, { emit, slots }) {
    const visible = ref(props.visible)

    watch(
      () => props.visible,
      () => {
        visible.value = props.visible
      },
    )

    const handleConfirm = () => {
      emit('confirm')
      visible.value = false
    }

    const Footer = () =>
      h('div', { class: 'picker-footer' }, [
        slots.footer && slots.footer(),
        props.cancelButton &&
          h(
            CButton,
            {
              color: props.cancelButtonColor,
              onClick: () => emit('cancel'),
              size: props.cancelButtonSize,
              variant: props.cancelButtonVariant,
            },
            /**
             * @slot Location for the cancel button content.
             */
            () => (slots.cancelButton ? slots.cancelButton() : props.cancelButton),
          ),
        props.confirmButton &&
          h(
            CButton,
            {
              color: props.confirmButtonColor,
              onClick: handleConfirm,
              size: props.confirmButtonSize,
              variant: props.confirmButtonVariant,
            },
            /**
             * @slot Location for the confirm button content.
             */
            () => (slots.confirmButton ? slots.confirmButton() : props.confirmButton),
          ),
      ])

    switch (props.container) {
      case 'inline':
        return () => h('div', { class: 'picker' }, slots.default && slots.default())
      default:
        return () =>
          h(
            CDropdown,
            {
              autoClose: 'outside',
              class: 'picker',
              onHide: () => {
                visible.value = false
                emit('hide')
              },
              onShow: () => {
                visible.value = true
                emit('show')
              },
              variant: 'dropdown',
              visible: visible.value,
            },
            () => [
              h(
                CDropdownToggle,
                {
                  custom: true,
                  disabled: visible.value || props.disabled,
                },
                {
                  /**
                   * @slot Location for the toggler element.
                   */
                  default: () => slots.toggler && slots.toggler(),
                },
              ),
              h(CDropdownMenu, {}, () => [
                slots.default && slots.default(),
                props.footer && Footer(),
              ]),
            ],
          )
    }
  },
})
export { CPicker }
