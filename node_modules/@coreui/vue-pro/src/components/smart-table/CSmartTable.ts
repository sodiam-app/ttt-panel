import { computed, defineComponent, h, reactive, ref, PropType, watch, onMounted } from 'vue'

import { CSmartPagination } from '../pagination/CSmartPagination'
import { CElementCover } from '../element-cover/CElementCover'

import { CTable } from '../table/CTable'

import { CSmartTableBody } from './CSmartTableBody'
import { CSmartTableHead } from './CSmartTableHead'
import { CSmartTableFilter } from './CSmartTableFilter'
import { CSmartTableCleaner } from './CSmartTableCleaner'
import { CSmartTableItemsPerPageSelector } from './CSmartTableItemsPerPageSelector'

import { CIcon } from '@coreui/icons-vue'

import { cilArrowTop, cilArrowBottom, cilFilterX, cilSwapVertical } from '@coreui/icons'

import {
  Column,
  ColumnFilter,
  ColumnFilterValue,
  Item,
  ItemsPerPageSelect,
  Sorter,
  SorterValue,
  TableFilter,
} from './CSmartTableInterface'

const CSmartTable = defineComponent({
  name: 'CSmartTable',
  props: {
    /**
     * Sets active page. If 'pagination' prop is enabled, activePage is set only initially.
     */
    activePage: {
      type: Number,
      default: 1,
      required: false,
    },
    /**
     * When set, displays table cleaner above table, next to the table filter (or in place of table filter if `tableFilter` prop is not set)
     * Cleaner resets `tableFilterValue`, `columnFilterValue`, `sorterValue`. If clean is possible it is clickable (`tabIndex="0"` `role="button"`, `color="danger"`), otherwise it is not clickable and transparent. Cleaner can be customized through the `cleanerIcon` slot.
     *
     */
    cleaner: {
      type: Boolean,
      required: false,
    },
    /**
     * Style table items as clickable.
     */
    clickableRows: {
      type: Boolean,
      required: false,
    },
    /**
     * When set, displays additional filter row between table header and items, allowing filtering by specific column.
     * Column filter can be customized, by passing prop as object with additional options as keys. Available options:
     * - external (Boolean) - Disables automatic filtering inside component.
     * - lazy (Boolean) - Set to true to trigger filter updates only on change event.
     */
    columnFilter: {
      type: [Boolean, Object] as PropType<boolean | ColumnFilter>,
      required: false,
    },
    /**
     * Value of table filter. To set pass object where keys are column names and values are filter strings e.g.:
     * { user: 'John', age: 12 }
     */
    columnFilterValue: {
      type: Object as PropType<ColumnFilterValue>,
      default: undefined,
      required: false,
    },
    /**
     * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')
     *
     * In columns prop each array item represents one column. Item might be specified in two ways:
     * String: each item define column name equal to item value.
     * Object: item is object with following keys available as column configuration:
     * - key (required)(String) - define column name equal to item key.
     * - filter (Boolean) - removes filter from column when set to false.
     * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.
     * - sorter (Boolean) - disables sorting of the column when set to false
     * - [_props](https://coreui.io/vue/docs/components/table.html#ctableheadercell) (String/Array/Object) - add props to `CTableHeaderCell`.
     * - _style (String/Array/Object) - adds styles to the column header (useful for defining widths)
     */
    columns: {
      type: Array as PropType<Column[] | string[]>,
      required: false,
    },
    /**
     * Enables table sorting by column value. Sorting will be performed corectly only if values in column are of one type: string (case insensitive) or number.
     *
     * Sorter can be customized, by passing prop as object with additional options as keys. Available options:
     * - external (Boolean) - Disables automatic sorting inside component.
     * - resetable (Boolean) - If set to true clicking on sorter have three states: ascending, descending and null. That means that third click on sorter will reset sorting, and restore table to original order.
     */
    columnSorter: {
      type: [Boolean, Object] as PropType<boolean | Sorter>,
      default: undefined,
      required: false,
    },
    /**
     * Displays table footer, which mirrors table header. (without column filter).
     */
    footer: {
      type: Boolean,
      required: false,
    },
    /**
     * Set to false to remove table header.
     */
    header: {
      type: Boolean,
      required: false,
      default: true,
    },
    /**
     * Array of objects, where each object represents one item - row in table. Additionally, you can customize each row by passing them by [_props](http://coreui.io/vue/docs/components/table.html#ctablerow) key and single cell by [_cellProps](http://coreui.io/vue/docs/components/table.html#ctabledatacell).
     *
     * Examples:
     * - `_props: { color: 'primary', align: 'middle'}`
     * - `_cellProps: { all: { class: 'fw-semibold'}, 'name': { color: 'info' }}`
     */
    items: {
      type: Array as PropType<Item[]>,
      default: () => [],
      required: false,
    },
    /**
     * Number of items per site, when pagination is enabled.
     */
    itemsPerPage: {
      type: Number,
      required: false,
    },
    /**
     * Label for items per page selector.
     */
    itemsPerPageLabel: {
      type: String,
      required: false,
      default: 'Items per page:',
    },
    /**
     * Items per page selector options.
     */
    itemsPerPageOptions: {
      type: Array as PropType<number[]>,
      default: () => [5, 10, 20, 50],
      required: false,
    },
    /**
     * Adds select element over table, which is used for control items per page in pagination. If you want to customize this element, pass object with optional values:
     * - label (String) - replaces default label text
     * - values (Array) - custom array of pagination values
     * - external (Boolean) - disables automatic 'itemsPerPage' change (use to change pages externaly by 'pagination-change' event).
     */
    itemsPerPageSelect: {
      type: [Boolean, Object] as PropType<boolean | ItemsPerPageSelect>,
      default: undefined,
      required: false,
    },
    /**
     * When set, table will have loading style: loading spinner and reduced opacity. When 'small' prop is enabled spinner will be also smaller.
     */
    loading: {
      type: Boolean,
      required: false,
    },
    /**
     * ReactNode or string for passing custom noItemsLabel texts.
     */
    noItemsLabel: {
      type: String,
      default: 'No items found',
      required: false,
    },
    /**
     * Enables default pagination. Set to true for default setup or pass an object with additional CPagination props. Default pagination will always have the computed number of pages that cannot be changed. The number of pages is generated based on the number of passed items and 'itemsPerPage' prop. If this restriction is an obstacle, you can make external CPagination instead.
     */
    pagination: {
      type: Boolean,
      required: false,
    },
    /**
     * Properties to [CSmartPagination](https://coreui.io/vue/docs/components/smart-pagination#csmartpagination) component.
     */
    paginationProps: {
      type: Object,
      default: undefined,
      required: false,
    },
    /**
     * Add checkboxes to make table rows selectable.
     */
    selectable: Boolean,
    /**
     * State of the sorter. Name key is column name, direction can be 'asc' or 'desc'. eg.:
     * { column: 'status', state: 'asc' }
     */
    sorterValue: {
      type: Object as PropType<SorterValue>,
      default: undefined,
      required: false,
    },
    /**
     * Properties to [CTableBody](https://coreui.io/vue/docs/components/table/#ctablebody) component.
     */
    tableBodyProps: {
      type: Object,
      default: undefined,
      required: false,
    },
    /**
     * Properties to [CTableFoot](https://coreui.io/vue/docs/components/table/#ctablefoot) component.
     */
    tableFootProps: {
      type: Object,
      default: undefined,
      required: false,
    },
    /**
     * When set, displays table filter above table, allowing filtering by specific column.
     *
     * Column filter can be customized, by passing prop as object with additional options as keys. Available options:
     * - external (Boolean) - Disables automatic filtering inside component.
     * - lazy (Boolean) - Set to true to trigger filter updates only on change event.
     */
    tableFilter: {
      type: [Boolean, Object] as PropType<boolean | TableFilter>,
      required: false,
    },
    /**
     * The element represents a caption for a component.
     */
    tableFilterLabel: {
      type: String,
      default: 'Filter:',
      required: false,
    },
    /**
     * Specifies a short hint that is visible in the search input.
     */
    tableFilterPlaceholder: {
      type: String,
      default: 'type string...',
      required: false,
    },
    /**
     * Value of table filter.
     */
    tableFilterValue: {
      type: String,
      default: undefined,
      required: false,
    },
    /**
     * Properties to [CTableHead](https://coreui.io/vue/docs/components/table/#ctablehead) component.
     */
    tableHeadProps: {
      type: Object,
      default: undefined,
      required: false,
    },
    /**
     * Properties to [CTable](https://coreui.io/vue/docs/components/table/#ctable) component.
     */
    tableProps: {
      type: Object,
      default: undefined,
      required: false,
    },
  },
  emits: [
    /**
     * Page change callback.
     *
     * @property {number} page - active page number
     */
    'activePageChange',
    /**
     * Column filter change callback.
     *
     * @property {object} ColumnFilterValue {[key: string]: string | number}
     */
    'columnFilterChange',
    /**
     * Filtered items change callback.
     *
     * @property {array} items
     */
    'filteredItemsChange',
    /**
     * Pagination change callback.
     *
     * @property {number} itemsPerPageNumber - items per page number
     */
    'itemsPerPageChange',
    /**
     * Row click callback.
     *
     * @property {object} item
     * @property {number} index
     * @property {string} columnName
     * @property {event} event
     */
    'rowClick',
    /**
     * Selected items change callback.
     *
     * @property {array} items
     */
    'selectedItemsChange',
    /**
     * Sorter value change callback.
     *
     * @property {object} SorterValue { column?: string, state?: number | string}
     */
    'sorterChange',
    /**
     * Table filter change callback.
     *
     * @property {string} tableFilterValue
     */
    'tableFilterChange',
  ],
  setup(props, { emit, slots }) {
    // reactive data
    const items = ref<Item[]>(
      props.items.map((item: Item, index: number) => {
        return { ...item, _id: index }
      }),
    )

    watch(
      () => props.items,
      () => {
        items.value = props.items.map((item: Item, index: number) => {
          return { ...item, _id: index }
        })
        if (
          items.value &&
          items.value.length < itemsPerPage.value * activePage.value - itemsPerPage.value
        ) {
          activePage.value = 1
        }
      },
    )

    const selectedAll = ref()

    watch(items, () => {
      const selected = items.value.filter((item) => item._selected === true)
      emit('selectedItemsChange', selected)

      if (selected.length === items.value.length) {
        selectedAll.value = true
        return
      }

      if (selected.length === 0) {
        selectedAll.value = false
        return
      }

      if (selected.length !== 0 && selected.length !== items.value.length) {
        selectedAll.value = 'indeterminate'
      }
    })

    const itemsPerPage = ref<number>(props.itemsPerPage || items.value.length)
    const activePage = ref(props.activePage)

    const sorterState: SorterValue = reactive(props.sorterValue || {})
    const columnFilterState = ref(props.columnFilterValue ? props.columnFilterValue : {})
    const tableFilterState = ref(props.tableFilterValue ? props.tableFilterValue : '')

    onMounted(() => {
      if (
        items.value &&
        items.value.length < itemsPerPage.value * activePage.value - itemsPerPage.value
      ) {
        activePage.value = 1
      }
    })

    // functions

    const isSortable = (i: number): boolean | undefined => {
      const isDataColumn = itemsDataColumns.value.includes(rawColumnNames.value[i])
      let column
      if (props.columns) column = props.columns[i]
      return (
        props.columnSorter &&
        (!props.columns ||
          typeof column !== 'object' ||
          (typeof column === 'object' &&
            (typeof column.sorter === 'undefined' || column.sorter))) &&
        isDataColumn
      )
    }

    const sorterChange = (column: string, index: number): void => {
      if (!isSortable(index)) {
        return
      }
      //if column changed or sort was descending change asc to true
      const state = sorterState

      if (state.column === column) {
        if (state.state === 0) {
          state.state = 'asc'
        } else if (state.state === 'asc') {
          state.state = 'desc'
        } else {
          if (typeof props.columnSorter === 'object' && !props.columnSorter.resetable) {
            state.state = 'asc'
          } else {
            state.state = 0
          }
        }
      } else {
        state.column = column
        state.state = 'asc'
      }
      sorterState.column = state.column
      sorterState.state = state.state

      emit('sorterChange', sorterState)
    }

    const handleActivePageChange = (page: number) => {
      activePage.value = page
      emit('activePageChange', page)
    }

    const handleItemsPerPageChange = (itemsPerPageNumber: number) => {
      itemsPerPage.value = itemsPerPageNumber
      itemsPerPageNumber !== props.itemsPerPage && handleActivePageChange(1) // TODO: set proper page after _itemsPerPage update
      emit('itemsPerPageChange', itemsPerPageNumber)
    }

    const handleRowChecked = (id: number, value: boolean) => {
      const newArr = [...items.value]
      newArr[id]._selected = value
      items.value = newArr
    }

    const handleRowClick = (
      item: Item,
      index: number,
      columnName: string,
      event: MouseEvent | boolean,
    ) => {
      emit('rowClick', item, index, columnName, event)
    }

    const handleSelectAllChecked = () => {
      if (selectedAll.value === true) {
        items.value = items.value.map((item: Item) => {
          return { ...item, _selected: false }
        })
        return
      }

      items.value = items.value.map((item: Item) => {
        return { ...item, _selected: true }
      })
    }

    const columnFilterChange = (colName: string, value: string, type: string): void => {
      const isLazy =
        props.columnFilter &&
        typeof props.columnFilter === 'object' &&
        props.columnFilter.lazy === true
      if ((isLazy && type === 'input') || (!isLazy && type === 'change')) {
        return
      }
      activePage.value = 1
      columnFilterState.value = { ...columnFilterState.value, [`${colName}`]: value }
      emit('columnFilterChange', columnFilterState.value)
    }

    const tableFilterChange = (value: string, type: string): void => {
      const isLazy =
        props.columnFilter &&
        typeof props.columnFilter === 'object' &&
        props.columnFilter.lazy === true
      if ((isLazy && type === 'input') || (!isLazy && type === 'change')) {
        return
      }
      activePage.value = 1
      tableFilterState.value = value
      emit('tableFilterChange', tableFilterState)
    }

    const clean = (): void => {
      tableFilterState.value = ''
      columnFilterState.value = {}
      sorterState.column = ''
      sorterState.state = ''
    }

    // computed

    const genCols = computed(() =>
      Object.keys(items.value[0] || {}).filter((el) => el.charAt(0) !== '_'),
    )

    const rawColumnNames = computed(() =>
      props.columns
        ? props.columns.map((column: Column | string) => {
            if (typeof column === 'object') return column.key
            else return column
          })
        : genCols.value,
    ) //! || el

    const itemsDataColumns = computed(() =>
      rawColumnNames.value.filter((name) => genCols.value.includes(name)),
    )

    // variables

    const columnFiltered = () => {
      let _items = items.value
      if (
        props.columnFilter &&
        typeof props.columnFilter === 'object' &&
        props.columnFilter.external
      ) {
        return _items
      }
      Object.entries(columnFilterState.value).forEach(([key, value]) => {
        const columnFilter = String(value).toLowerCase()
        if (columnFilter && itemsDataColumns.value.includes(key)) {
          _items = _items.filter((item) => {
            return String(item[key]).toLowerCase().includes(columnFilter)
          })
        }
      })
      return _items
    }

    const tableFiltered = computed(() => {
      let items = columnFiltered()
      if (
        !tableFilterState.value ||
        (props.tableFilter && typeof props.tableFilter === 'object' && props.tableFilter.external)
      ) {
        return items
      }
      const filter = tableFilterState.value.toLowerCase()
      const valueContainFilter = (val: any) => String(val).toLowerCase().includes(filter)
      items = items.filter((item) => {
        return !!itemsDataColumns.value.find((key) => valueContainFilter(item[key]))
      })
      emit('filteredItemsChange', items)
      return items
    })

    const sortedItems = computed(() => {
      const col = sorterState.column
      if (
        !col ||
        !itemsDataColumns.value.includes(col) ||
        (props.columnSorter &&
          typeof props.columnSorter === 'object' &&
          props.columnSorter.external)
      ) {
        return tableFiltered.value
      }
      //if values in column are to be sorted by numeric value they all have to be type number
      // const flip = sorterState.asc ? 1 : -1
      const flip = sorterState.state === 'asc' ? 1 : sorterState.state === 'desc' ? -1 : 0
      const sorted = tableFiltered.value.slice().sort((item, item2) => {
        const value = item[col]
        const value2 = item2[col]
        const a = typeof value === 'number' ? value : String(value).toLowerCase()
        const b = typeof value2 === 'number' ? value2 : String(value2).toLowerCase()
        return a > b ? 1 * flip : b > a ? -1 * flip : 0
      })
      return sorted
    })

    const numberOfPages = computed(() =>
      itemsPerPage.value ? Math.ceil(sortedItems.value.length / itemsPerPage.value) : 1,
    )

    const firstItemOnActivePageIndex = computed(() =>
      activePage.value ? (activePage.value - 1) * itemsPerPage.value : 0,
    )

    const itemsOnActivePage = computed(() =>
      sortedItems.value.slice(
        firstItemOnActivePageIndex.value,
        firstItemOnActivePageIndex.value + itemsPerPage.value,
      ),
    )

    const currentItems = computed(() =>
      activePage.value ? itemsOnActivePage.value : sortedItems.value,
    )

    const isFiltered = computed(() => {
      return (
        tableFilterState.value ||
        sorterState.column ||
        Object.values(columnFilterState.value).join('')
      )
    })

    return () =>
      h('div', {}, [
        (props.tableFilter || props.cleaner) &&
          h(
            'div',
            {
              class: 'row my-2 mx-0',
            },
            [
              props.tableFilter &&
                h(
                  'div',
                  {
                    class: 'col-auto p-0',
                  },
                  props.tableFilter &&
                    h(CSmartTableFilter, {
                      filterLabel: props.tableFilterLabel,
                      filterPlaceholder: props.tableFilterPlaceholder,
                      onFilterInput: (value: string) => tableFilterChange(value, 'input'),
                      onFilterChange: (value: string) => tableFilterChange(value, 'change'),
                      value: tableFilterState.value,
                    }),
                ),
              props.cleaner &&
                h(
                  'div',
                  {
                    class: 'col-auto p-0',
                  },
                  h(
                    CSmartTableCleaner,
                    {
                      onClick: () => clean(),
                      isFiltered: isFiltered.value,
                    },
                    {
                      // @slot Cleaner icon.
                      cleanerIcon: () =>
                        slots.cleanerIcon
                          ? slots.cleanerIcon()
                          : h(CIcon, { width: '18', content: cilFilterX }),
                    },
                  ),
                ),
            ],
          ), //h
        h(
          'div',
          {
            class: 'position-relative',
          },
          {
            default: () => [
              h(
                CTable,
                {
                  ...props.tableProps,
                },
                {
                  default: () => [
                    props.header &&
                      h(
                        CSmartTableHead,
                        {
                          component: 'head',
                          ...props.tableHeadProps,
                          columnFilter: props.columnFilter,
                          columnFilterValue: columnFilterState.value,
                          columns: props.columns ? props.columns : rawColumnNames.value,
                          columnSorter: props.columnSorter,
                          selectable: props.selectable,
                          selectAll: selectedAll.value,
                          sorterState: sorterState,
                          onFilterInput: (key: string, value: string) =>
                            columnFilterChange(key, value, 'input'),
                          onFilterChange: (key: string, value: string) =>
                            columnFilterChange(key, value, 'change'),
                          onSelectAllChecked: () => handleSelectAllChecked(),
                          onSortClick: (key: string, index: number) => sorterChange(key, index),
                        },
                        {
                          // @slot Sorter icon when items are unsorted.
                          sortingIcon: () =>
                            slots.sortingIcon
                              ? slots.sortingIcon()
                              : h('svg', {
                                  xmlns: 'http://www.w3.org/2000/svg',
                                  class: 'icon',
                                  viewBox: '0 0 512 512',
                                  role: 'img',
                                  innerHTML: cilSwapVertical[1],
                                }),
                          // @slot Sorter icon when items are sorted ascending.
                          sortingIconAscending: () =>
                            slots.sortingIconAscending
                              ? slots.sortingIconAscending()
                              : // : h(CIcon, { content: cilArrowBottom }, 'b'),
                                h('svg', {
                                  xmlns: 'http://www.w3.org/2000/svg',
                                  class: 'icon',
                                  viewBox: '0 0 512 512',
                                  role: 'img',
                                  innerHTML: cilArrowBottom[1],
                                }),
                          // @slot  Sorter icon when items are sorted descending.
                          sortingIconDescending: () =>
                            slots.sortingIconDescending
                              ? slots.sortingIconDescending()
                              : // : h(CIcon, { content: cilArrowTop }, 'c'),
                                h('svg', {
                                  xmlns: 'http://www.w3.org/2000/svg',
                                  class: 'icon',
                                  viewBox: '0 0 512 512',
                                  role: 'img',
                                  innerHTML: cilArrowTop[1],
                                }),
                        },
                      ),
                    h(CSmartTableBody, {
                      currentItems: currentItems.value,
                      firstItemOnActivePageIndex: firstItemOnActivePageIndex.value,
                      noItemsLabel: props.noItemsLabel,
                      scopedSlots: slots,
                      selectable: props.selectable,
                      onRowChecked: (id: number, value: boolean) => handleRowChecked(id, value),
                      onRowClick: (
                        item: Item,
                        index: number,
                        columnName: string,
                        event: MouseEvent | boolean,
                      ) => handleRowClick(item, index, columnName, event),
                      rawColumnNames: rawColumnNames.value,
                      clickableRows: props.clickableRows,
                      ...props.tableBodyProps,
                    }),
                    props.footer &&
                      h(CSmartTableHead, {
                        component: 'footer',
                        ...props.tableFootProps,
                        columnFilter: false,
                        columnSorter: false,
                        columns: props.columns ? props.columns : rawColumnNames.value,
                        selectable: props.selectable,
                        selectAll: selectedAll.value,
                        onFilterInput: (key: string, value: string) =>
                          columnFilterChange(key, value, 'input'),
                        onFilterChange: (key: string, value: string) =>
                          columnFilterChange(key, value, 'change'),
                        onSelectAllChecked: () => handleSelectAllChecked(),
                      }),
                  ],
                },
              ),
              props.loading &&
                h(CElementCover, {
                  boundaries: [
                    { sides: ['top'], query: 'td' },
                    { sides: ['bottom'], query: 'tbody' },
                  ],
                }),
            ],
          },
        ),
        (props.pagination || props.itemsPerPageSelect) &&
          h(
            'div',
            {
              class: 'row',
            },
            [
              h(
                'div',
                {
                  class: 'col',
                },
                props.pagination && numberOfPages.value > 1
                  ? h(CSmartPagination, {
                      ...props.paginationProps,
                      pages: numberOfPages.value,
                      activePage: activePage.value,
                      onActivePageChange: handleActivePageChange,
                    })
                  : '',
              ),
              h(
                'div',
                {
                  class: 'col-auto ms-auto',
                },
                props.itemsPerPageSelect &&
                  h(CSmartTableItemsPerPageSelector, {
                    itemsPerPage: itemsPerPage.value,
                    itemsPerPageLabel: props.itemsPerPageLabel,
                    itemsPerPageOptions: props.itemsPerPageOptions,
                    onChangeItemsPerPage: handleItemsPerPageChange,
                  }),
              ),
            ],
          ),
      ]) //h
  },
})
export { CSmartTable }
