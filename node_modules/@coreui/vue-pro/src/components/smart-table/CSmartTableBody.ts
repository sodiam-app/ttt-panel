import { defineComponent, h, PropType } from 'vue'

import { CTableBody, CTableDataCell, CTableRow } from '../table/'
import { CFormCheck } from '../form/'

import { Item } from './CSmartTableInterface'

const CSmartTableBody = defineComponent({
  name: 'CSmartTableBody',
  props: {
    clickableRows: {
      type: Boolean,
      require: false,
    },
    currentItems: {
      type: Array as PropType<Item[]>,
      default: () => [],
      required: false,
    },
    firstItemOnActivePageIndex: {
      type: Number,
      require: true,
      default: 0,
    },
    noItemLabel: {
      type: String,
      default: undefined,
      require: false,
    },
    rawColumnNames: {
      type: Array as PropType<string[]>,
      default: () => [],
      require: true,
    },
    scopedSlots: {
      type: Object,
      default: undefined,
      require: false,
    },
    selectable: Boolean,
  },
  emits: ['rowChecked', 'rowClick'],
  setup(props, { emit }) {
    const handleRowClick = (
      item: Item,
      index: number,
      columnName: string,
      event: MouseEvent | boolean,
    ) => {
      emit('rowClick', item, index, columnName, event)
    }

    const handleRowChecked = (id: number, value: boolean) => {
      emit('rowChecked', id, value)
    }

    const tableDataCellProps = (item: Item, colName: string) => {
      const props = item._cellProps && {
        ...(item._cellProps['all'] && { ...item._cellProps['all'] }),
        ...(item._cellProps[colName] && { ...item._cellProps[colName] }),
      }

      return props
    }

    const getColumnName = (event: MouseEvent): string => {
      const target = event.target as HTMLTextAreaElement
      const closest = target.closest('tr')
      const children = closest ? Array.from(closest.children) : []
      const clickedCell = children.filter((child) => child.contains(target))[0]
      return props.rawColumnNames[children.indexOf(clickedCell)]
    }

    return () =>
      h(
        CTableBody,
        {
          ...(props.clickableRows && { style: 'cursor:pointer;' }),
        },
        {
          default: () =>
            props.currentItems.map((item: Item, trIndex) => [
              h(
                CTableRow,
                {
                  ...(item._props && { ...item._props }),
                  ...(props.clickableRows && { tabindex: 0 }),
                  onClick: (event: MouseEvent) =>
                    handleRowClick(
                      item,
                      trIndex + props.firstItemOnActivePageIndex,
                      getColumnName(event),
                      event,
                    ),
                },
                {
                  default: () => [
                    props.selectable &&
                      h(CTableDataCell, {}, () =>
                        h(CFormCheck, {
                          checked: item._selected ? item._selected : false,
                          onChange: (event: Event) =>
                            handleRowChecked(item._id, (event.target as HTMLInputElement).checked),
                        }),
                      ),
                    props.rawColumnNames.map((colName) =>
                      props.scopedSlots &&
                      props.scopedSlots[colName] &&
                      typeof props.scopedSlots[colName] === 'function'
                        ? h(props.scopedSlots[colName], { item: item })
                        : h(
                            CTableDataCell,
                            {
                              ...tableDataCellProps(item, colName),
                            },
                            {
                              default: () => String(item[colName]),
                            },
                          ),
                    ),
                  ],
                },
              ),
              props.scopedSlots &&
                props.scopedSlots['details'] && [
                  h(CTableRow, {
                    colspan: props.selectable
                      ? props.rawColumnNames.length + 1
                      : props.rawColumnNames.length,
                    class: 'p-0',
                    style: { 'border-bottom-width': '0' },
                    tabindex: '-1',
                  }),
                  h(
                    CTableRow,
                    {
                      class: 'p-0',
                      key: `details${trIndex}`,
                      onClick: (event: MouseEvent) =>
                        handleRowClick(
                          item,
                          trIndex + props.firstItemOnActivePageIndex,
                          getColumnName(event),
                          true,
                        ),
                    },
                    {
                      default: () =>
                        h(
                          CTableDataCell,
                          {
                            colspan: props.selectable
                              ? props.rawColumnNames.length + 1
                              : props.rawColumnNames.length,
                            class: 'p-0',
                            style: { border: 0 },
                          },
                          {
                            default: () =>
                              props.scopedSlots &&
                              props.scopedSlots['details'] &&
                              h(props.scopedSlots['details'], {
                                item: item,
                                onClick: (event: MouseEvent) =>
                                  handleRowClick(
                                    item,
                                    trIndex + props.firstItemOnActivePageIndex,
                                    getColumnName(event),
                                    true,
                                  ),
                              }),
                          },
                        ),
                    },
                  ),
                ],
            ]),
        },
      )
  },
})

export { CSmartTableBody }
