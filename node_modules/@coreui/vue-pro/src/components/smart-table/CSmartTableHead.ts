import { defineComponent, h, PropType } from 'vue'
import { CTableHead, CTableFoot } from '../table/'
import { CTableHeaderCell } from '../table/CTableHeaderCell'
import { CTableRow } from '../table/CTableRow'

import { CFormCheck, CFormInput } from '../form/'

import {
  Column,
  ColumnFilter,
  ColumnFilterValue,
  Sorter,
  SorterValue,
} from './CSmartTableInterface'

const CSmartTableHead = defineComponent({
  name: 'CSmartTableHead',
  props: {
    clearSorterAndFilter: {
      type: String,
      require: false,
      default: '',
    },
    columnFilter: {
      type: [Boolean, Object] as PropType<boolean | ColumnFilter>,
      require: false,
    },
    columnFilterValue: {
      type: Object as PropType<ColumnFilterValue>,
      required: false,
    },
    columnSorter: {
      type: [Boolean, Object] as PropType<boolean | Sorter>,
      default: undefined,
      require: false,
    },
    component: {
      type: String,
      default: 'head',
      require: false,
    },
    columns: {
      type: Array as PropType<Column[] | string[]>,
      default: () => [],
      required: false,
    },
    selectable: Boolean,
    selectAll: [Boolean, String],
    sorterState: {
      type: Object as PropType<SorterValue>,
      default: undefined,
      require: false,
    },
  },
  emits: ['filterInput', 'filterChange', 'selectAllChecked', 'sortClick'],
  setup(props, { slots, emit }) {
    const handleSortClick = (key: string, index: number) => {
      emit('sortClick', key, index)
    }

    const tableHeaderCellProps = (column: Column | string) => {
      if (typeof column === 'object' && column._props) {
        return column._props
      }
      return {}
    }

    const tableHeaderCellStyles = (column: Column | string) => {
      const style = { verticalAlign: 'middle', overflow: 'hidden', cursor: '' }
      if (
        props.columnSorter &&
        (typeof column !== 'object' ||
          (typeof column === 'object' && (typeof column.sorter === 'undefined' || column.sorter)))
      ) {
        style.cursor = 'pointer'
      }

      if (typeof column === 'object' && column._props) {
        return { ...style, ...column._style }
      }
      return style
    }

    const pretifyName = (name: string) => {
      return name
        .replace(/[-_.]/g, ' ')
        .replace(/ +/g, ' ')
        .replace(/([a-z0-9])([A-Z])/g, '$1 $2')
        .split(' ')
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ')
    }

    const label = (column: Column | string) =>
      typeof column === 'object'
        ? column.label !== undefined
          ? column.label
          : pretifyName(column.key)
        : pretifyName(column)

    const key = (column: Column | string) => (typeof column === 'object' ? column.key : column)

    const getColumnSorterState = (key: string): string | number => {
      if (props.sorterState && props.sorterState.column === key) {
        if (props.sorterState.state) {
          return props.sorterState.state
        }
        return 0
      }
      return 0
    }

    const columnSorterIcon = (column: Column | string) => {
      if (getColumnSorterState(key(column)) === 0) {
        return h(
          'span',
          { class: 'opacity-25 float-end me-1' },
          slots.sortingIcon && slots.sortingIcon(),
        )
      }
      if (getColumnSorterState(key(column)) === 'asc') {
        return h(
          'span',
          { class: 'float-end me-1' },
          slots.sortingIconAscending && slots.sortingIconAscending(),
        )
      }
      if (getColumnSorterState(key(column)) === 'desc') {
        return h(
          'span',
          { class: 'float-end me-1' },
          slots.sortingIconDescending && slots.sortingIconDescending(),
        )
      }
      return
    }

    const handleFilterInput = (key: string, value: string) => {
      emit('filterInput', key, value)
    }

    const handleFilterChange = (key: string, value: string) => {
      emit('filterChange', key, value)
    }

    const handleSelectAllChecked = () => {
      emit('selectAllChecked')
    }

    return () =>
      h(
        props.component === 'head' ? CTableHead : CTableFoot,
        {},
        {
          default: () => [
            h(
              CTableRow,
              {},
              {
                default: () => [
                  props.selectable &&
                    h(CTableHeaderCell, {}, () =>
                      h(CFormCheck, {
                        checked: typeof props.selectAll === 'boolean' ? props.selectAll : false,
                        indeterminate: props.selectAll === 'indeterminate' ? true : false,
                        onChange: () => handleSelectAllChecked(),
                      }),
                    ),
                  props.columns.map((column, index: number) =>
                    h(
                      CTableHeaderCell,
                      {
                        ...tableHeaderCellProps(column),
                        onClick: () => handleSortClick(key(column), index),
                        style: tableHeaderCellStyles(column),
                      },
                      {
                        default: () => [
                          h(
                            'div',
                            {
                              class: 'd-inline',
                            },
                            label(column),
                          ),
                          props.columnSorter &&
                            (typeof column !== 'object'
                              ? true
                              : typeof column.sorter === 'undefined'
                              ? true
                              : column.sorter) &&
                            columnSorterIcon(column),
                        ],
                      },
                    ),
                  ),
                ],
              },
            ),
            props.columnFilter &&
              h(
                CTableRow,
                {},
                {
                  default: () => [
                    props.selectable && h(CTableHeaderCell),
                    props.columns.map((column: Column | string) =>
                      h(
                        CTableHeaderCell,
                        {
                          ...tableHeaderCellProps(column),
                        },
                        {
                          default: () =>
                            (typeof column !== 'object'
                              ? true
                              : typeof column.filter === 'undefined'
                              ? true
                              : column.filter) &&
                            h(CFormInput, {
                              size: 'sm',
                              onInput: (event: Event) =>
                                handleFilterInput(
                                  key(column),
                                  (event.target as HTMLInputElement).value,
                                ),
                              onChange: (event: Event) =>
                                handleFilterChange(
                                  key(column),
                                  (event.target as HTMLInputElement).value,
                                ),
                              'aria-label': `column name: '${label(column)}' filter input`,
                              ...(props.columnFilterValue &&
                                props.columnFilterValue[key(column)] && {
                                  value: props.columnFilterValue[key(column)],
                                }),
                            }),
                        },
                      ),
                    ),
                  ],
                },
              ),
          ],
        },
      )
  },
})

export { CSmartTableHead }
