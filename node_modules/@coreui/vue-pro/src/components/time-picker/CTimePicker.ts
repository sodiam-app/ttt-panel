import { defineComponent, h, ref, watch } from 'vue'

import { CFormInput, CFormSelect, CInputGroup, CInputGroupText } from '../form/'
import { CPicker } from '../picker'
import { CTimePickerRollCol } from './CTimePickerRollCol'

import {
  convert12hTo24h,
  convertTimeToDate,
  getAmPm,
  getListOfHours,
  getListOfMinutes,
  getListOfSeconds,
  getSelectedHour,
  getSelectedMinutes,
  getSelectedSeconds,
  isAmPm,
  isValidTime,
} from '../../utils/time'

import { Color } from '../props'

const CTimePicker = defineComponent({
  name: 'CTimePicker',
  props: {
    ...CPicker.props,
    /**
     * Toggle visibility or set the content of cancel button.
     */
    cancelButton: {
      type: [Boolean, String],
      default: 'Cancel',
    },
    /**
     * Sets the color context of the cancel button to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    cancelButtonColor: {
      ...Color,
      default: 'primary',
    },
    /**
     * Size the cancel button small or large.
     *
     * @values 'sm', 'lg'
     */
    cancelButtonSize: {
      type: String,
      default: 'sm',
      validator: (value: string) => {
        return ['sm', 'lg'].includes(value)
      },
    },
    /**
     * Set the cancel button variant to an outlined button or a ghost button.
     *
     * @values 'ghost', 'outline'
     */
    cancelButtonVariant: {
      type: String,
      default: 'ghost',
      validator: (value: string) => {
        return ['ghost', 'outline'].includes(value)
      },
    },
    /**
     * Toggle visibility of the cleaner button.
     */
    cleaner: {
      type: Boolean,
      default: true,
    },
    /**
     * Toggle visibility or set the content of confirm button.
     */
    confirmButton: {
      type: [Boolean, String],
      default: 'OK',
    },
    /**
     * Sets the color context of the confirm button to one of CoreUI’s themed colors.
     *
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    confirmButtonColor: {
      ...Color,
      default: 'primary',
    },
    /**
     * Size the confirm button small or large.
     *
     * @values 'sm', 'lg'
     */
    confirmButtonSize: {
      type: String,
      default: 'sm',
      validator: (value: string) => {
        return ['sm', 'lg'].includes(value)
      },
    },
    /**
     * Set the confirm button variant to an outlined button or a ghost button.
     *
     * @values 'ghost', 'outline'
     */
    confirmButtonVariant: {
      type: String,
      validator: (value: string) => {
        return ['ghost', 'outline'].includes(value)
      },
    },
    /**
     * Toggle visibility or set the content of the input indicator.
     */
    indicator: {
      type: Boolean,
      default: true,
    },
    /**
     * Toggle the readonly state for the component.
     */
    inputReadOnly: Boolean,
    /**
     * Sets the default locale for components. If not set, it is inherited from the navigator.language.
     */
    locale: {
      type: String,
      defalut: 'default',
    },
    /**
     * Specifies a short hint that is visible in the input.
     */
    placeholder: {
      type: String,
      default: 'Select time',
    },
    /**
     * Size the component small or large.
     *
     * @values 'sm', 'lg'
     */
    size: {
      type: String,
      default: undefined,
      validator: (value: string) => {
        return ['sm', 'lg'].includes(value)
      },
    },
    /**
     * Initial selected time.
     */
    time: {
      type: [Date, String],
    },
    /**
     * Set the time picker variant to a roll or select.
     *
     * @values 'roll', 'select'
     */
    variant: {
      type: String,
      default: 'roll',
      validator: (value: string) => {
        return ['roll', 'select'].includes(value)
      },
    },
  },
  emits: [
    /**
     * Callback fired when the time changed.
     */
    'change',
    /**
     * Callback fired when the component requests to be hidden.
     */
    'hide',
    /**
     * Callback fired when the component requests to be shown.
     */
    'show',
  ],
  setup(props, { emit, slots }) {
    const date = ref<Date | null>(convertTimeToDate(props.time))
    const initialDate = ref<Date | null>(null)
    const ampm = ref<'am' | 'pm'>(date.value ? getAmPm(new Date(date.value), props.locale) : 'am')

    watch(
      () => props.time,
      () => {
        date.value = convertTimeToDate(props.time)
      },
    )

    watch(date, () => {
      if (date.value) {
        ampm.value = getAmPm(new Date(date.value), props.locale)
      }
    })

    const handleClear = (event: Event) => {
      event.stopPropagation()
      date.value = null
    }

    const handleTimeChange = (set: 'hours' | 'minutes' | 'seconds' | 'toggle', value: string) => {
      const _date = date.value || new Date('1970-01-01')

      if (set === 'toggle') {
        if (value === 'am') {
          _date.setHours(_date.getHours() - 12)
        }
        if (value === 'pm') {
          _date.setHours(_date.getHours() + 12)
        }
      }

      if (set === 'hours') {
        if (isAmPm(props.locale)) {
          _date.setHours(convert12hTo24h(ampm.value, parseInt(value)))
        } else {
          _date.setHours(parseInt(value))
        }
      }

      if (set === 'minutes') {
        _date.setMinutes(parseInt(value))
      }

      if (set === 'seconds') {
        _date.setSeconds(parseInt(value))
      }

      date.value = new Date(_date)
      emit('change', _date.toTimeString(), _date.toLocaleTimeString(), _date)
    }

    const InputGroup = () =>
      h(CInputGroup, { class: 'picker-input-group', size: props.size }, () => [
        h(CFormInput, {
          disabled: props.disabled,
          onInput: (event) => {
            if (isValidTime(event.target.value)) {
              date.value = convertTimeToDate(event.target.value)
            }
          },
          placeholder: props.placeholder,
          readonly: props.inputReadOnly,
          value: date.value ? date.value.toLocaleTimeString(props.locale) : '',
        }),
        (props.indicator || props.cleaner) &&
          h(CInputGroupText, {}, () => [
            props.indicator &&
              h(
                'span',
                {
                  class: 'picker-input-group-indicator',
                },
                slots.indicator
                  ? slots.indicator()
                  : h('span', { class: 'picker-input-group-icon time-picker-input-icon' }),
              ),
            props.cleaner &&
              h(
                'span',
                {
                  class: 'picker-input-group-cleaner',
                  onClick: (event: Event) => handleClear(event),
                  role: 'button',
                },
                slots.cleaner
                  ? slots.cleaner()
                  : h('span', { class: 'picker-input-group-icon time-picker-cleaner-icon' }),
              ),
          ]),
      ])

    const TimePickerSelect = () => [
      h('span', { class: 'time-picker-inline-icon' }),
      h(CFormSelect, {
        disabled: props.disabled,
        options: getListOfHours(props.locale).map((option) => {
          return {
            value: option.value.toString(),
            label: option.label,
          }
        }),
        onChange: (event) => handleTimeChange('hours', event.target.value),
        ...(date.value && { value: getSelectedHour(date.value, props.locale) }),
      }),
      ':',
      // @ts-expect-error the getListOfMinutes function returns corect type
      h(CFormSelect, {
        disabled: props.disabled,
        options: getListOfMinutes(props.locale, true),
        onChange: (event: Event) =>
          handleTimeChange('minutes', (event.target as HTMLSelectElement).value),
        ...(date.value && { value: getSelectedMinutes(date.value) }),
      }),
      ':',
      // @ts-expect-error the getListOfMinutes function returns corect type
      h(CFormSelect, {
        disabled: props.disabled,
        options: getListOfSeconds(props.locale, true),
        onChange: (event: Event) =>
          handleTimeChange('seconds', (event.target as HTMLSelectElement).value),
        ...(date.value && { value: getSelectedSeconds(date.value) }),
      }),
      isAmPm(props.locale) &&
        h(CFormSelect, {
          disabled: props.disabled,
          options: [
            { value: 'am', label: 'AM' },
            { value: 'pm', label: 'PM' },
          ],
          onChange: (event) => handleTimeChange('toggle', event.target.value),
          value: ampm.value,
        }),
    ]

    const TimePickerRoll = () => [
      h(CTimePickerRollCol, {
        elements: getListOfHours(props.locale),
        onClick: (index: number) => handleTimeChange('hours', index.toString()),
        selected: getSelectedHour(date.value, props.locale),
      }),
      h(CTimePickerRollCol, {
        elements: getListOfMinutes(props.locale),
        onClick: (index: number) => handleTimeChange('minutes', index.toString()),
        selected: getSelectedMinutes(date.value),
      }),
      h(CTimePickerRollCol, {
        elements: getListOfSeconds(props.locale),
        onClick: (index: number) => handleTimeChange('seconds', index.toString()),
        selected: getSelectedSeconds(date.value),
      }),
      isAmPm(props.locale) &&
        h(CTimePickerRollCol, {
          elements: [
            { value: 'am', label: 'AM' },
            { value: 'pm', label: 'PM' },
          ],
          onClick: (value: string) => handleTimeChange('toggle', value),
          selected: ampm.value,
        }),
    ]

    return () =>
      h(
        CPicker,
        {
          cancelButton: props.cancelButton,
          cancelButtonColor: props.cancelButtonColor,
          cancelButtonSize: props.cancelButtonSize,
          cancelButtonVariant: props.cancelButtonVariant,
          class: 'time-picker',
          confirmButton: props.confirmButton,
          confirmButtonColor: props.confirmButtonColor,
          confirmButtonSize: props.confirmButtonSize,
          confirmButtonVariant: props.confirmButtonVariant,
          container: props.container,
          disabled: props.disabled,
          footer: true,
          onCancel: () => {
            if (initialDate.value) {
              date.value = new Date(initialDate.value)
            }
          },
          onHide: () => {
            emit('hide')
          },
          onShow: () => {
            if (date.value) {
              initialDate.value = new Date(date.value)
            }

            emit('show')
          },
        },
        {
          ...(slots.cancelButton && {
            cancelButton: () => slots.cancelButton && slots.cancelButton(),
          }),
          ...(slots.confirmButton && {
            confirmButton: () => slots.confirmButton && slots.confirmButton(),
          }),
          toggler: () => InputGroup(),
          default: () =>
            h(
              'div',
              {
                class: [
                  'time-picker-body',
                  {
                    ['time-picker-roll']: props.variant === 'roll',
                  },
                ],
              },
              props.variant === 'select' ? TimePickerSelect() : TimePickerRoll(),
            ),
        },
      )
  },
})
export { CTimePicker }
